// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BlitzLlamaSDK
import DeveloperToolsSupport
import Foundation
import SafariServices
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_hasMissingDesignatedInitializers public class BlitzLlamaSDKController {
  public static let getSDKManager: BlitzLlamaSDK.BlitzLlamaSDKController
  public var enableLog: Swift.Bool
  public var isSurveyLive: Swift.Bool
  public typealias SurveyCompletionCallback = ([[Swift.String : Any]]) -> Swift.Void
  public func getUserId() -> Swift.String
  @objc deinit
}
extension BlitzLlamaSDK.BlitzLlamaSDKController {
  public func setBlitzLlamaAPIKey(apiKey: Swift.String, enableLog: Swift.Bool = false)
  public func setLanguageCode(_ langCode: Swift.String)
  public func subscribeEvent(eventName: Swift.String, callback: @escaping BlitzLlamaSDK.BlitzLlamaSDKController.SurveyCompletionCallback)
  public func setPlatform(_ platForm: Swift.String)
  public func createUser(_ userId: Swift.String)
  public func getUserDetails()
  public func updateUserName(_ username: Swift.String)
  public func updateUserEmail(_ email: Swift.String)
  public func updateUserAttributes(attribute: Swift.String, attributeValue: Swift.String, dataType: Swift.String)
  public func fetchSurvey(viewController: UIKit.UIViewController, triggerName: Swift.String, properties: [Swift.String : Any]? = nil)
  public func fetchSurvey(triggerName: Swift.String, properties: [Swift.String : Swift.String]? = nil)
}
public struct AppNetworkingRequest {
}
public struct MultiPartRequest {
}
public struct MediaRequest {
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MicroSurveyBottomSheetVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var questionTypeAtClassLevel: BlitzLlamaSDK.QuestionType
  @_Concurrency.MainActor(unsafe) public var languageCode: BlitzLlamaSDK.LanguageCode
  @_Concurrency.MainActor(unsafe) public var isRTL: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var surveyModel: BlitzLlamaSDK.GetSurveyResponseModel?
  @_Concurrency.MainActor(unsafe) public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let maxDimmedAlpha: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var dimmedBackgroundView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BlitzLlamaSDK.MicroSurveyBottomSheetVC : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
public struct NetworkError : Swift.Error {
}
public struct WebServices {
}
public enum LanguageCode : Swift.String {
  case ar
  case ur
  case fa
  case he
  case en
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum SwiftyJSONError : Swift.Int, Swift.Error {
  case unsupportedType
  case indexOutOfBounds
  case elementTooDeep
  case wrongType
  case notExist
  case invalidJSON
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BlitzLlamaSDK.SwiftyJSONError : Foundation.CustomNSError {
  public static var errorDomain: Swift.String {
    get
  }
  public var errorCode: Swift.Int {
    get
  }
  public var errorUserInfo: [Swift.String : Any] {
    get
  }
}
public enum Type : Swift.Int {
  case number
  case string
  case bool
  case array
  case dictionary
  case null
  case unknown
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct JSON {
  public init(data: Foundation.Data, options opt: Foundation.JSONSerialization.ReadingOptions = []) throws
  public init(_ object: Any)
  public init(parseJSON jsonString: Swift.String)
  public mutating func merge(with other: BlitzLlamaSDK.JSON) throws
  public func merged(with other: BlitzLlamaSDK.JSON) throws -> BlitzLlamaSDK.JSON
  public var type: BlitzLlamaSDK.`Type` {
    get
  }
  public var error: BlitzLlamaSDK.SwiftyJSONError? {
    get
  }
  public var object: Any {
    get
    set
  }
  @available(*, unavailable, renamed: "null")
  public static var nullJSON: BlitzLlamaSDK.JSON {
    get
  }
  public static var null: BlitzLlamaSDK.JSON {
    get
  }
}
public enum Index<T> : Swift.Comparable {
  case array(Swift.Int)
  case dictionary(Swift.DictionaryIndex<Swift.String, T>)
  case null
  public static func == (lhs: BlitzLlamaSDK.Index<T>, rhs: BlitzLlamaSDK.Index<T>) -> Swift.Bool
  public static func < (lhs: BlitzLlamaSDK.Index<T>, rhs: BlitzLlamaSDK.Index<T>) -> Swift.Bool
}
public typealias JSONIndex = BlitzLlamaSDK.Index<BlitzLlamaSDK.JSON>
public typealias JSONRawIndex = BlitzLlamaSDK.Index<Any>
extension BlitzLlamaSDK.JSON : Swift.Collection {
  public typealias Index = BlitzLlamaSDK.JSONRawIndex
  public var startIndex: BlitzLlamaSDK.JSON.Index {
    get
  }
  public var endIndex: BlitzLlamaSDK.JSON.Index {
    get
  }
  public func index(after i: BlitzLlamaSDK.JSON.Index) -> BlitzLlamaSDK.JSON.Index
  public subscript(position: BlitzLlamaSDK.JSON.Index) -> (Swift.String, BlitzLlamaSDK.JSON) {
    get
  }
  public typealias Element = (Swift.String, BlitzLlamaSDK.JSON)
  public typealias Indices = Swift.DefaultIndices<BlitzLlamaSDK.JSON>
  public typealias Iterator = Swift.IndexingIterator<BlitzLlamaSDK.JSON>
  public typealias SubSequence = Swift.Slice<BlitzLlamaSDK.JSON>
}
public enum JSONKey {
  case index(Swift.Int)
  case key(Swift.String)
}
public protocol JSONSubscriptType {
  var jsonKey: BlitzLlamaSDK.JSONKey { get }
}
extension Swift.Int : BlitzLlamaSDK.JSONSubscriptType {
  public var jsonKey: BlitzLlamaSDK.JSONKey {
    get
  }
}
extension Swift.String : BlitzLlamaSDK.JSONSubscriptType {
  public var jsonKey: BlitzLlamaSDK.JSONKey {
    get
  }
}
extension BlitzLlamaSDK.JSON {
  public subscript(path: [any BlitzLlamaSDK.JSONSubscriptType]) -> BlitzLlamaSDK.JSON {
    get
    set
  }
  public subscript(path: any BlitzLlamaSDK.JSONSubscriptType...) -> BlitzLlamaSDK.JSON {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON : Swift.ExpressibleByStringLiteral {
  public init(stringLiteral value: Swift.StringLiteralType)
  public init(extendedGraphemeClusterLiteral value: Swift.StringLiteralType)
  public init(unicodeScalarLiteral value: Swift.StringLiteralType)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.StringLiteralType
  public typealias StringLiteralType = Swift.StringLiteralType
  public typealias UnicodeScalarLiteralType = Swift.StringLiteralType
}
extension BlitzLlamaSDK.JSON : Swift.ExpressibleByIntegerLiteral {
  public init(integerLiteral value: Swift.IntegerLiteralType)
  public typealias IntegerLiteralType = Swift.IntegerLiteralType
}
extension BlitzLlamaSDK.JSON : Swift.ExpressibleByBooleanLiteral {
  public init(booleanLiteral value: Swift.BooleanLiteralType)
  public typealias BooleanLiteralType = Swift.BooleanLiteralType
}
extension BlitzLlamaSDK.JSON : Swift.ExpressibleByFloatLiteral {
  public init(floatLiteral value: Swift.FloatLiteralType)
  public typealias FloatLiteralType = Swift.FloatLiteralType
}
extension BlitzLlamaSDK.JSON : Swift.ExpressibleByDictionaryLiteral {
  public init(dictionaryLiteral elements: (Swift.String, Any)...)
  public typealias Key = Swift.String
  public typealias Value = Any
}
extension BlitzLlamaSDK.JSON : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: Any...)
  public typealias ArrayLiteralElement = Any
}
extension BlitzLlamaSDK.JSON : Swift.RawRepresentable {
  public init?(rawValue: Any)
  public var rawValue: Any {
    get
  }
  public func rawData(options opt: Foundation.JSONSerialization.WritingOptions = JSONSerialization.WritingOptions(rawValue: 0)) throws -> Foundation.Data
  public func rawString(_ encoding: Swift.String.Encoding = .utf8, options opt: Foundation.JSONSerialization.WritingOptions = .prettyPrinted) -> Swift.String?
  public func rawString(_ options: [BlitzLlamaSDK.writingOptionsKeys : Any]) -> Swift.String?
  public typealias RawValue = Any
}
extension BlitzLlamaSDK.JSON : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension BlitzLlamaSDK.JSON {
  public var array: [BlitzLlamaSDK.JSON]? {
    get
  }
  public var arrayValue: [BlitzLlamaSDK.JSON] {
    get
  }
  public var arrayObject: [Any]? {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON {
  public var dictionary: [Swift.String : BlitzLlamaSDK.JSON]? {
    get
  }
  public var dictionaryValue: [Swift.String : BlitzLlamaSDK.JSON] {
    get
  }
  public var dictionaryObject: [Swift.String : Any]? {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON {
  public var bool: Swift.Bool? {
    get
    set
  }
  public var boolValue: Swift.Bool {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON {
  public var string: Swift.String? {
    get
    set
  }
  public var stringValue: Swift.String {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON {
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var numberValue: Foundation.NSNumber {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON {
  public var null: Foundation.NSNull? {
    get
    set
  }
  public func exists() -> Swift.Bool
}
extension BlitzLlamaSDK.JSON {
  public var url: Foundation.URL? {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON {
  public var double: Swift.Double? {
    get
    set
  }
  public var doubleValue: Swift.Double {
    get
    set
  }
  public var float: Swift.Float? {
    get
    set
  }
  public var floatValue: Swift.Float {
    get
    set
  }
  public var int: Swift.Int? {
    get
    set
  }
  public var intValue: Swift.Int {
    get
    set
  }
  public var uInt: Swift.UInt? {
    get
    set
  }
  public var uIntValue: Swift.UInt {
    get
    set
  }
  public var int8: Swift.Int8? {
    get
    set
  }
  public var int8Value: Swift.Int8 {
    get
    set
  }
  public var uInt8: Swift.UInt8? {
    get
    set
  }
  public var uInt8Value: Swift.UInt8 {
    get
    set
  }
  public var int16: Swift.Int16? {
    get
    set
  }
  public var int16Value: Swift.Int16 {
    get
    set
  }
  public var uInt16: Swift.UInt16? {
    get
    set
  }
  public var uInt16Value: Swift.UInt16 {
    get
    set
  }
  public var int32: Swift.Int32? {
    get
    set
  }
  public var int32Value: Swift.Int32 {
    get
    set
  }
  public var uInt32: Swift.UInt32? {
    get
    set
  }
  public var uInt32Value: Swift.UInt32 {
    get
    set
  }
  public var int64: Swift.Int64? {
    get
    set
  }
  public var int64Value: Swift.Int64 {
    get
    set
  }
  public var uInt64: Swift.UInt64? {
    get
    set
  }
  public var uInt64Value: Swift.UInt64 {
    get
    set
  }
}
extension BlitzLlamaSDK.JSON : Swift.Comparable {
}
public func == (lhs: BlitzLlamaSDK.JSON, rhs: BlitzLlamaSDK.JSON) -> Swift.Bool
public func <= (lhs: BlitzLlamaSDK.JSON, rhs: BlitzLlamaSDK.JSON) -> Swift.Bool
public func >= (lhs: BlitzLlamaSDK.JSON, rhs: BlitzLlamaSDK.JSON) -> Swift.Bool
public func > (lhs: BlitzLlamaSDK.JSON, rhs: BlitzLlamaSDK.JSON) -> Swift.Bool
public func < (lhs: BlitzLlamaSDK.JSON, rhs: BlitzLlamaSDK.JSON) -> Swift.Bool
public enum writingOptionsKeys {
  case jsonSerialization
  case castNilToNSNull
  case maxObjextDepth
  case encoding
  public static func == (a: BlitzLlamaSDK.writingOptionsKeys, b: BlitzLlamaSDK.writingOptionsKeys) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension BlitzLlamaSDK.JSON : Swift.Codable {
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
extension BlitzLlamaSDK.BlitzLlamaSDKController {
  public func logout()
}
public struct APIKey {
}
public enum QuestionType : Swift.String {
  case singleSelect
  case multiSelect
  case nps
  case scaleRating
  case starRating
  case emojiRating
  case inputFeedback
  case introPrompt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct GetSurveyResponseModel : Swift.Codable {
  public let survey: BlitzLlamaSDK.Survey
  public let questions: [BlitzLlamaSDK.Question]
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Question : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Properties : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Labels : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Option : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct RuleSet : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Survey : Swift.Codable {
  public let surveyTheme: BlitzLlamaSDK.SurveyTheme
  public let triggerDelay: Swift.Int?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct SurveyTheme : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Intro : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct AppNetworking {
  public var authenticationToken: Swift.String?
  public var customJsonDecoder: Foundation.JSONDecoder?
  public func request<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func requestWithMultiPartFormData<T>(multiPartRequest: BlitzLlamaSDK.MultiPartRequest, responseType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func getData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func patchData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func postData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func putData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func deleteData<T>(requestUrl: Foundation.URL, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
}
public enum AppNetworkingHttpMethods : Swift.String {
  case get
  case post
  case put
  case delete
  case patch
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct HTTPStatusCode {
}
extension BlitzLlamaSDK.LanguageCode : Swift.Equatable {}
extension BlitzLlamaSDK.LanguageCode : Swift.Hashable {}
extension BlitzLlamaSDK.LanguageCode : Swift.RawRepresentable {}
extension BlitzLlamaSDK.SwiftyJSONError : Swift.Equatable {}
extension BlitzLlamaSDK.SwiftyJSONError : Swift.Hashable {}
extension BlitzLlamaSDK.SwiftyJSONError : Swift.RawRepresentable {}
extension BlitzLlamaSDK.`Type` : Swift.Equatable {}
extension BlitzLlamaSDK.`Type` : Swift.Hashable {}
extension BlitzLlamaSDK.`Type` : Swift.RawRepresentable {}
extension BlitzLlamaSDK.writingOptionsKeys : Swift.Equatable {}
extension BlitzLlamaSDK.writingOptionsKeys : Swift.Hashable {}
extension BlitzLlamaSDK.QuestionType : Swift.Equatable {}
extension BlitzLlamaSDK.QuestionType : Swift.Hashable {}
extension BlitzLlamaSDK.QuestionType : Swift.RawRepresentable {}
extension BlitzLlamaSDK.AppNetworkingHttpMethods : Swift.Equatable {}
extension BlitzLlamaSDK.AppNetworkingHttpMethods : Swift.Hashable {}
extension BlitzLlamaSDK.AppNetworkingHttpMethods : Swift.RawRepresentable {}
