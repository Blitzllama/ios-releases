// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name BlitzLlamaSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
@_exported import BlitzLlamaSDK
import Foundation
import SafariServices
import Swift
import SwiftUI
import SwiftyJSON
import UIKit
import _Concurrency
import _StringProcessing
@_hasMissingDesignatedInitializers public class BlitzLlamaSDKController {
  public static let getSDKManager: BlitzLlamaSDK.BlitzLlamaSDKController
  public var isSurveyLive: Swift.Bool
  @objc deinit
}
extension BlitzLlamaSDK.BlitzLlamaSDKController {
  public func setBlitzLlamaAPIKey(apiKey: Swift.String, userId: Swift.String)
  public func setLanguageCode(_ langCode: Swift.String)
  public func setPlatform(_ platForm: Swift.String)
  public func createUser(_ userId: Swift.String)
  public func getUserDetails()
  public func updateUserName(_ username: Swift.String)
  public func updateUserEmail(_ email: Swift.String)
  public func updateUserAttributes(attribute: Swift.String, attributeValue: Swift.String, dataType: Swift.String)
  public func fetchSurvey(viewController: UIKit.UIViewController, triggerName: Swift.String, properties: [Swift.String : Any]? = nil)
  public func fetchSurvey(triggerName: Swift.String, properties: [Swift.String : Swift.String]? = nil)
}
public struct AppNetworkingRequest {
}
public struct MultiPartRequest {
}
public struct MediaRequest {
}
public enum LanguageCode : Swift.String {
  case ar
  case ur
  case fa
  case he
  case en
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MicroSurveyBottomSheetVC : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var questionType: BlitzLlamaSDK.QuestionType
  @_Concurrency.MainActor(unsafe) public var languageCode: BlitzLlamaSDK.LanguageCode
  @_Concurrency.MainActor(unsafe) public var isRTL: Swift.Bool
  @_Concurrency.MainActor(unsafe) public var surveyModel: BlitzLlamaSDK.GetSurveyResponseModel?
  @_Concurrency.MainActor(unsafe) public var containerView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public let maxDimmedAlpha: CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) public var dimmedBackgroundView: UIKit.UIView {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension BlitzLlamaSDK.MicroSurveyBottomSheetVC : SafariServices.SFSafariViewControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func safariViewControllerDidFinish(_ controller: SafariServices.SFSafariViewController)
}
public struct NetworkError : Swift.Error {
}
public struct WebServices {
}
public struct GetSurveyResponseModel : Swift.Codable {
  public let survey: BlitzLlamaSDK.Survey
  public let questions: [BlitzLlamaSDK.Question]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Question : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Properties : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Labels : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Option : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct RuleSet : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Survey : Swift.Codable {
  public let surveyTheme: BlitzLlamaSDK.SurveyTheme
  public let triggerDelay: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SurveyTheme : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Intro : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AppNetworking {
  public var authenticationToken: Swift.String?
  public var customJsonDecoder: Foundation.JSONDecoder?
  public func request<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func requestWithMultiPartFormData<T>(multiPartRequest: BlitzLlamaSDK.MultiPartRequest, responseType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func getData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func patchData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func postData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func putData<T>(request: BlitzLlamaSDK.AppNetworkingRequest, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
  public func deleteData<T>(requestUrl: Foundation.URL, resultType: T.Type, completionHandler: @escaping (Swift.Result<T?, BlitzLlamaSDK.NetworkError>) -> Swift.Void) where T : Swift.Decodable
}
public enum QuestionType : Swift.String {
  case singleSelect
  case multiSelect
  case nps
  case scaleRating
  case starRating
  case emojiRating
  case inputFeedback
  case introPrompt
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension BlitzLlamaSDK.LanguageCode : Swift.Equatable {}
extension BlitzLlamaSDK.LanguageCode : Swift.Hashable {}
extension BlitzLlamaSDK.LanguageCode : Swift.RawRepresentable {}
extension BlitzLlamaSDK.QuestionType : Swift.Equatable {}
extension BlitzLlamaSDK.QuestionType : Swift.Hashable {}
extension BlitzLlamaSDK.QuestionType : Swift.RawRepresentable {}
